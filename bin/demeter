#!/usr/bin/perl

use strict;
use warnings;

use File::Basename qw/dirname/;

use lib dirname(__FILE__) . '/../lib';
use File::ShareDir qw/dist_dir/;
use MooseX::FollowPBP;
use Getopt::Long;
use YAML;
use Carp;
use Module::Find qw/findsubmod/;

use App::Demeter::Util qw/make_logger/;

my @available_sources = grep {$_ !~ /ABC$/} findsubmod( 'App::Demeter::Source' );

my $USAGE = 'Usage: perl $script [options] command [Source1 Source2...]';

my $SYMLINKS_AVAILABLE = eval { symlink('', ''); 1 };

my $verbose = 0;
my $config = 'default';
my $show_sources = 0;
my $show_help = 0;
my $get_data = 0;
my $do_alias = 0;

my $confdir = $ENV{HOME} . '/.demeter';
my $dist_dir = eval {dist_dir('App-Demeter')} || '';

my $script = __FILE__;

my $result = GetOptions(
    "environment=s" => \$config,
    "confdir=s"     => \$confdir,
    "verbose"       => \$verbose,
    "help"          => \$show_help, # Because it's common
);

my ($command, @cmd_args) = @ARGV;

$get_data     = $command =~ /^g(et?)?/i if $command;
$show_sources = $command =~ /^l(i(st?)?)?$/i if $command;
$do_alias     = $command =~ /^a(l(i(as?)?)?)?$/ if $command;
$show_help ||= ($command =~ /^h(e(lp?)?)?$/i) || not ($command || $get_data || $show_sources);

if ($show_help) {
    warn <<"HELP";

$script
Download data from specific sources

$USAGE

Options:
  -e --environment  The set of configuration options to load. Defaults to "default"
  -h --help         Show this help
  -c --confdir      An optional configuration directory. Defaults to ~/.demeter

Commands:
  get           Download data
  help          Show help information
  list          Show available sources
  alias name    Alias an environment as another name

If no sources are selected, then then the default list from the 
configuration file will be loaded and run.

If the enviroment value points to a file, that will be loaded. If it names
an environment, then a file named \$env.yml will be looked for first in
\$confdir (if supplied), and then in the config directory of this distribution.

HELP
    exit;
}

if ($show_sources) {
    warn "Available sources:\n";
    for my $src (sort @available_sources) {
        $src =~ s/.*:://;
        warn "\t- $src\n";
    }
    exit;
}

    

# RESOLVE THE CONFIG FILE TO USE.
my $config_file;
my @look_in = ($confdir, $dist_dir, dirname(__FILE__) . '/../config');
if ($config =~ m[/]) {
    # Assume this is a qualified path.
    $config_file = $config;
} else {
    for my $dir (@look_in) {
        $config_file = "$dir/$config.yml";
        last if (-e $config_file);
    }
}
# Check it exists.

unless (-e $config_file) {
    $, = ", ";
    croak <<"USAGE";

Cannot find a config file for the $config environment. Looked in: @look_in.

$USAGE

USAGE
}

if ($do_alias) {
    if (@cmd_args != 1) {
        croak <<"USAGE";

Expected a single argument to alias, got [@cmd_args]

$USAGE

USAGE
    }
    croak "Symlinks not supported on this system." unless $SYMLINKS_AVAILABLE;

    my $alias = $cmd_args[0];
    my $alias_file = "$confdir/$alias.yml";
    unless (-e $confdir) {
        mkdir($confdir) or die("Could not make $confdir, $!");
    }
    symlink($config_file, $alias_file)
        or die("Could not link $config_file to $alias_file, $!");
    warn "Aliased $config_file as $alias";
    exit;
}

my ($LOGDIR, $DATA_DIR, $DEFAULT_SOURCES, $OPTS) = read_config($config_file);

my $logger =  make_logger($LOGDIR);
my %args   = (data_dir => $DATA_DIR, logger => $logger);
my @sources_to_get = (@cmd_args) ? @cmd_args : @$DEFAULT_SOURCES;

for my $source (@sources_to_get) {
    $logger->debug("Loading $source");
    my $package = "App::Demeter::Source::$source";
    eval "require $package";
    if (my $e = $@) {
        $logger->error("Failed to load source $source:", $e);
        next;
    }
    my $source_options = $OPTS->{$source} || {};
    eval {
        my $downloader = $package->new(%args, options => $source_options);
        $downloader->get_data();
    };
    if (my $e = $@) {
        $logger->error("Failed to download source $source:", $e);
    }
} 

exit;

##### FUNCTIONS ####

sub read_config {
    my $config_file = shift;

    my $settings = YAML::LoadFile($config_file);

    my ($log_dir, $data_dir) = @{$settings}{qw/log_dir data_dir/};
    ($log_dir && $data_dir) or croak <<"USAGE";

The config file must supply a value for both log_dir and data_dir.

Usage: perl $script [options] command [Source1 Source2...]

USAGE

    my $LOGDIR = ($settings->{log_dir} =~ m{^/}) 
        ? $settings->{log_dir}
        : $ENV{HOME} . '/' . $settings->{log_dir};
    my $DATA_DIR = ($settings->{log_dir} =~ m{^/})
        ? $settings->{data_dir}
        : $ENV{HOME} . '/' . $settings->{data_dir};

    my $DEFAULT_SOURCES = $settings->{default_sources} || [];

    return ($LOGDIR, $DATA_DIR, $DEFAULT_SOURCES, $settings);
}
